"use strict";(self.webpackChunksisyphus_docs=self.webpackChunksisyphus_docs||[]).push([[5412],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,m=u["".concat(s,".").concat(h)]||u[h]||c[h]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2754:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={slug:"new-docker-plugin",title:"New docker plugin",authors:["higan"],tags:["docker","sisyphus-project-plugin","gradle","release"]},o=void 0,l={permalink:"/blog/new-docker-plugin",editUrl:"https://github.com/ButterCam/sisyphus-docs/edit/main/blog/2022-10-18-new-docker-plugin.md",source:"@site/blog/2022-10-18-new-docker-plugin.md",title:"New docker plugin",description:"In Sisyphus 1.5.20, we have further optimized the Docker plugin to make it easier to use.",date:"2022-10-18T00:00:00.000Z",formattedDate:"October 18, 2022",tags:[{label:"docker",permalink:"/blog/tags/docker"},{label:"sisyphus-project-plugin",permalink:"/blog/tags/sisyphus-project-plugin"},{label:"gradle",permalink:"/blog/tags/gradle"},{label:"release",permalink:"/blog/tags/release"}],readingTime:4.69,hasTruncateMarker:!0,authors:[{name:"HIGAN",title:"Sisyphus maintainer",url:"https://github.com/devkanro",imageURL:"https://github.com/devkanro.png",key:"higan"}],frontMatter:{slug:"new-docker-plugin",title:"New docker plugin",authors:["higan"],tags:["docker","sisyphus-project-plugin","gradle","release"]}},s={authorsImageUrls:[void 0]},p=[{value:"How it started",id:"how-it-started",level:2},{value:"How it optimized",id:"how-it-optimized",level:2},{value:"Generated dockerfile with Spring Layered Jar",id:"generated-dockerfile-with-spring-layered-jar",level:2},{value:"Apply to CI pipeline",id:"apply-to-ci-pipeline",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In Sisyphus 1.5.20, we have further optimized the Docker plugin to make it easier to use."),(0,a.kt)("p",null,"The main tweaks include changes to the base Docker plugin, automatic Dockerfile generation, and support for Spring\nlayered jar builds."),(0,a.kt)("h2",{id:"how-it-started"},"How it started"),(0,a.kt)("p",null,"We've been using GitHub Action as our CI tool, and when we create a PullRequest, CI automatically compiles a SNAPSHOT\nversion of the image to deploy the test environment. After the PR merge, the CI compiles a SNAPSHOT version with branch\nnames to deploy the beta environment. The final deployment image is actually compiled when the Release is created."),(0,a.kt)("p",null,"As you can see, we need to build the image three times in the whole CI pipeline, and each build takes about 40 minutes,\nwhich can take close to two hours from the time the PR is raised to the final release."),(0,a.kt)("p",null,"And due to the recent internal CI flow resource consumption problem, our backend service has been taking three hours for\none build, so until the CI flow resource problem is solved, we have to optimize our CI pipeline."),(0,a.kt)("h2",{id:"how-it-optimized"},"How it optimized"),(0,a.kt)("p",null,"First of all, in the actual use process, the SNAPSHOT version of the PR build image is generally not used, most cases\nare used to deploy the test environment of the developer's local build image, so we can remove the PR image build step,\njust do some code checking."),(0,a.kt)("p",null,"Second, the SNAPSHOT version built for each branch is actually the same as the RELEASE version in the final release, but\ndue to the subtle differences in the build environment, the compilation result is not cached, and the branch building\nstill needs to be run again for each release. So for this, we plan to reuse the image compiled from the previous branch\nbuilt."),(0,a.kt)("p",null,"In previous versions, we used ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/palantir/gradle-docker"},"palantir/gradle-docker")," as our base Docker\nplugin, for which we also optimized the design of the tag task."),(0,a.kt)("p",null,"However, during this CI pipeline optimization, we found some shortcomings, such as no ",(0,a.kt)("inlineCode",{parentName:"p"},"docker save")," support and no easy\nway to get the current build image ID."),(0,a.kt)("p",null,"So we switched the base Docker plugin\nto ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bmuschko/gradle-docker-plugin"},"bmuschko/gradle-docker-plugin"),", which provides more underlying\noperational capabilities."),(0,a.kt)("h2",{id:"generated-dockerfile-with-spring-layered-jar"},"Generated dockerfile with Spring Layered Jar"),(0,a.kt)("p",null,"In our previous usage, our Dockerfile was written manually, while the new base Docker plugin provides the ability to\nautomatically generate a Dockerfile, so we intend to generate Dockerfile automatically by the plugin."),(0,a.kt)("p",null,"Previously, our Dockerfile was written according to Spring Boot's Layered Jar hierarchy, which looked something like\nthis."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM amazoncorretto:17 as builder\nARG PROJECT_NAME\nARG PROJECT_VERSION\nENV PROJECT_NAME=$PROJECT_NAME\nENV PROJECT_VERSION=$PROJECT_VERSION\n\nCOPY "${PROJECT_NAME}-${PROJECT_VERSION}.jar" application.jar\nRUN java -Djarmode=layertools -jar application.jar extract\n\nFROM --platform=linux/amd64 amd64/amazoncorretto:17\n\nARG PROJECT_NAME\nARG PROJECT_VERSION\nENV PROJECT_NAME=$PROJECT_NAME\nENV PROJECT_VERSION=$PROJECT_VERSION\n\nCOPY --from=builder dependencies/ ./\nRUN true\nCOPY --from=builder spring-boot-loader/ ./\nRUN true\nCOPY --from=builder sisyphus-dependencies/ ./\nRUN true\nCOPY --from=builder butter-dependencies/ ./\nRUN true\nCOPY --from=builder snapshot-dependencies/ ./\nRUN true\nCOPY --from=builder application/ ./\n\nENTRYPOINT ["java", "org.springframework.boot.loader.JarLauncher"]\n')),(0,a.kt)("p",null,"Spring Boot 2.3 added support\nfor ",(0,a.kt)("a",{parentName:"p",href:"https://spring.io/blog/2020/08/14/creating-efficient-docker-images-with-spring-boot-2-3"},"Layered Jar"),", which allows\nyou to layer dependencies and application packages. We use this feature in Dockerfile to layer different dependencies\naccording to their update frequency, putting infrequently updated dependencies in the bottom layer and frequently\nupdated dependencies in the top layer, so that when we upgrade only the frequently changed components, we can reuse the\nprevious bottom image, thus speeding up the image build."),(0,a.kt)("p",null,"So we used Docker's builder mode to decompress the Layered Jar to a temporary Docker pod, and then copied the\ndecompressed layers into the final image in hierarchical order."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'tasks.withType<BootJar> {\n    layered {\n        application {\n            intoLayer("spring-boot-loader") {\n                include("org/springframework/boot/loader/**")\n            }\n            intoLayer("application")\n        }\n        dependencies {\n            intoLayer("snapshot-dependencies") {\n                include("*:*:*SNAPSHOT")\n            }\n            intoLayer("sisyphus-dependencies") {\n                include("com.bybutter.sisyphus.*:*:*")\n            }\n            intoLayer("butter-dependencies") {\n                include("com.bybutter.*:*:*")\n            }\n            intoLayer("dependencies")\n        }\n        layerOrder = listOf(\n            "dependencies",\n            "spring-boot-loader",\n            "sisyphus-dependencies",\n            "butter-dependencies",\n            "snapshot-dependencies",\n            "application"\n        )\n    }\n}\n')),(0,a.kt)("p",null,"In the above configuration, we have roughly divided the code into 6 layers:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"dependencies",(0,a.kt)("br",{parentName:"li"}),"This layer contains all the third-party dependencies."),(0,a.kt)("li",{parentName:"ol"},"spring-boot-loader",(0,a.kt)("br",{parentName:"li"}),"This layer contains the Spring Boot loader."),(0,a.kt)("li",{parentName:"ol"},"sisyphus-dependencies",(0,a.kt)("br",{parentName:"li"}),"This layer contains all the Sisyphus dependencies. Sisyphus often does some iterative upgrades due to business needs,\nso it is separated from the common dependencies."),(0,a.kt)("li",{parentName:"ol"},"butter-dependencies",(0,a.kt)("br",{parentName:"li"}),"This layer contains all our internal dependencies and is closely related to the business."),(0,a.kt)("li",{parentName:"ol"},"snapshot-dependencies",(0,a.kt)("br",{parentName:"li"}),"This layer contains all the SNAPSHOT version dependencies as snapshot versions, which may change during development."),(0,a.kt)("li",{parentName:"ol"},"application",(0,a.kt)("br",{parentName:"li"}),"This layer contains the business code and is the most frequently updated layer.")),(0,a.kt)("p",null,"The new Sisyphus Docker plugin automatically reads the layering information from the bootJar task and generates a\nlayered decompression task to decompress the bootJar layering to the Docker build's working directory."),(0,a.kt)("p",null,"Then the ",(0,a.kt)("inlineCode",{parentName:"p"},"dockerfile")," task generates the Dockerfile needed for the build."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'ARG PROJECT_NAME\nARG PROJECT_VERSION\nFROM amazoncorretto:17\nENV PROJECT_NAME=$PROJECT_NAME\nENV PROJECT_VERSION=$PROJECT_VERSION\nCOPY dependencies/ ./\nRUN true\nCOPY spring-boot-loader/ ./\nRUN true\nCOPY sisyphus-dependencies/ ./\nRUN true\nCOPY butter-dependencies/ ./\nRUN true\nCOPY snapshot-dependencies/ ./\nRUN true\nCOPY application/ ./\nRUN true\nENTRYPOINT ["java", "org.springframework.boot.loader.JarLauncher"]\n')),(0,a.kt)("h2",{id:"apply-to-ci-pipeline"},"Apply to CI pipeline"),(0,a.kt)("p",null,"The new Docker plugin automatically generates a file containing the image IDs when it is built, and we collect these\nimage IDs during the build of the branch SNAPSHOT version and store them in an attachment to the draft release."),(0,a.kt)("p",null,"Re-tagging these image IDs with the release version during the Release build pipeline to saves image build time."),(0,a.kt)("p",null,"In fact, at the beginning, our original design was to save the branch SNAPSHOT image as a file via docker save and then\nload it and re-tag as release version, but this would result in an oversized Release attachment, so we finally chose to\nre-tag it using the image ID."))}c.isMDXComponent=!0}}]);