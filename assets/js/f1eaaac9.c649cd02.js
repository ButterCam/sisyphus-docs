"use strict";(self.webpackChunksisyphus_docs=self.webpackChunksisyphus_docs||[]).push([[7221],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?o.createElement(h,a(a({ref:t},c),{},{components:n})):o.createElement(h,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,a[1]=p;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8658:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:2},a="Implement a gRPC API",p={unversionedId:"guides/implement-a-grpc-api",id:"guides/implement-a-grpc-api",title:"Implement a gRPC API",description:"All gRPC APIs are defined by service and rpc in the proto file, and these definitions will be generated as Kotlin",source:"@site/docs/guides/implement-a-grpc-api.md",sourceDirName:"guides",slug:"/guides/implement-a-grpc-api",permalink:"/docs/guides/implement-a-grpc-api",draft:!1,editUrl:"https://github.com/ButterCam/sisyphus-docs/edit/main/docs/guides/implement-a-grpc-api.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create a message",permalink:"/docs/guides/create-a-message"},next:{title:"Auth your API",permalink:"/docs/guides/auth-your-api"}},s={},l=[{value:"<code>generateProtos</code> Task",id:"generateprotos-task",level:2},{value:"Throwing Exceptions",id:"throwing-exceptions",level:2},{value:"Implement echo API",id:"implement-echo-api",level:2}],c={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"implement-a-grpc-api"},"Implement a gRPC API"),(0,r.kt)("p",null,"All gRPC APIs are defined by ",(0,r.kt)("inlineCode",{parentName:"p"},"service")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"rpc")," in the proto file, and these definitions will be generated as Kotlin\ncode by the Sisyphus Protobuf plugin."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},'service Echo {\n    rpc Echo (EchoRequest) returns (EchoResponse) {\n        option (google.api.http) = {\n            post: "/v1beta1/echo:echo"\n            body: "*"\n        };\n    }\n}\n')),(0,r.kt)("p",null,"In our code we simply add a class and extends the generated abstract class and then hit the ",(0,r.kt)("inlineCode",{parentName:"p"},"@RpcServiceImpl"),"\nannotation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'@RpcServiceImpl\nclass EchoImpl : Echo() {\n    override suspend fun Echo(request: EchoRequest): EchoResponse {\n        TODO("not implemented")\n    }\n}\n')),(0,r.kt)("h2",{id:"generateprotos-task"},(0,r.kt)("inlineCode",{parentName:"h2"},"generateProtos")," Task"),(0,r.kt)("p",null,"Earlier we introduced the ",(0,r.kt)("inlineCode",{parentName:"p"},"generateProtos")," Gradle task, which generates Kotlin code for all proto files."),(0,r.kt)("p",null,"Any compilation operation depends on the corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"generateProtos")," task, so when the ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," task is executed, the\nproto file is also generated automatically."),(0,r.kt)("p",null,"However, we still need to execute ",(0,r.kt)("inlineCode",{parentName:"p"},"generateProtos")," manually when the code does not compile properly with incomplete\nKotlin."),(0,r.kt)("admonition",{title:"Note",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"When the proto file has changed, or when you can't find an element in the proto, just execute ",(0,r.kt)("inlineCode",{parentName:"p"},"generateProtos"),"!")),(0,r.kt)("h2",{id:"throwing-exceptions"},"Throwing Exceptions"),(0,r.kt)("p",null,"Feel free to throw a ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusException")," in the gRPC implementation, and Sisyphus will correctly convert this exception to\na gRPC error response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.bybutter.sisyphus.rpc.StatusException\n\nthrow StatusException(Code(it.code), it.message).withDetails(it.details)\n")),(0,r.kt)("p",null,"StatusException` has a number of util functions to provide more information about errors, and the standards for these\nerror\nmessages ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/googleapis/api-common-protos/blob/main/google/rpc/error_details.proto"},"predefined by Google"),"\n, and Sisyphus implements these."),(0,r.kt)("admonition",{title:"Caution",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusException"),", note that it is imported under the ",(0,r.kt)("inlineCode",{parentName:"p"},"com.bybutter.sisyphus.rpc")," package, not the ",(0,r.kt)("inlineCode",{parentName:"p"},"io.grpc"),"\npackage. ",(0,r.kt)("inlineCode",{parentName:"p"},"io.grpc.StatusException")," provides the most basic information for exception, and although Sisyphus can handle\nit, it is not recommended because it does not support additional information.")),(0,r.kt)("h2",{id:"implement-echo-api"},"Implement echo API"),(0,r.kt)("p",null,"Knowing how to create a Message and throw an exception, we can properly implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"Echo.echo")," API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"override suspend fun echo(input: EchoRequest): EchoResponse {\n    input.error?.let {\n        throw StatusException(Code(it.code), it.message)\n            .withDetails(it.details)\n    }\n    return EchoResponse {\n        this.content = input.content\n        this.severity = input.severity\n    }\n}\n")),(0,r.kt)("p",null,"The above example is the simplest gRPC API that converts the content in ",(0,r.kt)("inlineCode",{parentName:"p"},"EchoRequest")," to the content in ",(0,r.kt)("inlineCode",{parentName:"p"},"EchoResponse"),"."),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"EchoRequest")," contains an error, a ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusException")," is thrown to display the error."))}d.isMDXComponent=!0}}]);