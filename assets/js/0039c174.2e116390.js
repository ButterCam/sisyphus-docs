"use strict";(self.webpackChunksisyphus_docs=self.webpackChunksisyphus_docs||[]).push([[7331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),g=o,m=u["".concat(p,".").concat(g)]||u[g]||d[g]||i;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7813:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:4},a="HTTP Transcoding",s={unversionedId:"guides/http-transcoding",id:"guides/http-transcoding",title:"HTTP Transcoding",description:"Since the gRPC protocol is based on the HTTP/2 protocol, in some environments, especially in browsers, full HTTP/2",source:"@site/docs/guides/http-transcoding.md",sourceDirName:"guides",slug:"/guides/http-transcoding",permalink:"/docs/guides/http-transcoding",draft:!1,editUrl:"https://github.com/ButterCam/sisyphus-docs/edit/main/docs/guides/http-transcoding.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Auth your API",permalink:"/docs/guides/auth-your-api"},next:{title:"Design new API",permalink:"/docs/guides/design-your-api"}},p={},l=[],c={toc:l};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"http-transcoding"},"HTTP Transcoding"),(0,o.kt)("p",null,"Since the gRPC protocol is based on the HTTP/2 protocol, in some environments, especially in browsers, full HTTP/2\nsupport is not available, so a compatible HTTP API should be provided."),(0,o.kt)("p",null,"Sisyphus uses and implements the HTTP and gRPC Transcoding standard from ",(0,o.kt)("a",{parentName:"p",href:"https://google.aip.dev/127"},"Google AIP-127"),",\nwhich only requires a specified option under the API method of the proto to automatically support HTTP Restful API."),(0,o.kt)("p",null,"Sisyphus uses Spring Webflux to implement HTTP Transcoding, and all Webflux components can be used in the Transcoding\nservice, and can also be integrated with existing Spring components."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'service Book {\n    rpc CreateBook (CreateBookRequest) returns (Book) {\n        option (google.api.http) = {\n            post: "/v1/{parent=publishers/*}/books"\n            body: "book"\n        };\n    }\n}\n\nmessage CreateBookRequest {\n    // Since the path contains `{parent=publishers/*}`, the `parent` field is automatically populated from that section.\n    string parent = 1 [\n        (google.api.field_behavior) = REQUIRED,\n        (google.api.resource_reference) = {\n            child_type: "library.googleapis.com/Book"\n        }];\n\n    // Since `body: "book"` is configured, this field will be populated based on the HTTP request body.\n    Book book = 2 [(google.api.field_behavior) = REQUIRED];\n\n    // Since the field is not included in the URI path nor in the Body, it is populated in a similar way to the `?book_id=foo` HTTP Query.\n    string book_id = 3;\n}\n')),(0,o.kt)("p",null,"Add the ",(0,o.kt)("inlineCode",{parentName:"p"},"sisyphus-grpc-transcoding-starter")," dependency to build.gradle.kts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    implementation("com.bybutter.sisyphus.starter:sisyphus-grpc-server-starter:1.5.22")\n    implementation("com.bybutter.sisyphus.starter:sisyphus-grpc-transcoding-starter:1.5.22")\n}\n')),(0,o.kt)("p",null,"And add the ",(0,o.kt)("inlineCode",{parentName:"p"},"@EnableHttpToGrpcTranscoding")," annotation to the Spring entry class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@SpringBootApplication\n@EnableHttpToGrpcTranscoding\nclass ShowcaseApplication\n")),(0,o.kt)("p",null,"Then restart the gRPC service, and you can see in the startup log that in addition to the gRPC service port, port 8080\nis also being listened to by Netty."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-log"},"2022-07-05 01:03:03.634  INFO 39930 --- [           main] c.b.s.starter.grpc.ServerLifecycle       : Running gRPC server via netty on port: 7469\n2022-07-05 01:03:03.644  INFO 39930 --- [           main] o.s.b.web.embedded.netty.NettyWebServer  : Netty started on port 8080\n2022-07-05 01:03:03.648  INFO 39930 --- [           main] MainKt                                   : Started MainKt in 1.25 seconds (JVM running for 1.604)\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,o.kt)("a",{parentName:"mdxAdmonitionTitle",href:"https://github.com/ButterCam/sisyphus.js"},"sisyphus.js")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/ButterCam/sisyphus.js"},"sisyphus.js")),"  is provided specifically for the gRPC API using the AIP-127\nstandard JavaScript/TypeScript runtime, which works perfectly with the Sisyphus backend.",(0,o.kt)("br",{parentName:"p"}),"\n","Moreover, since it is targeted at the browser environment, ",(0,o.kt)("strong",{parentName:"p"},"sisyphus.js")," also cares about the generated file size,\nallowing the most convenient way to call the API with the smallest code size.")))}d.isMDXComponent=!0}}]);