"use strict";(self.webpackChunksisyphus_docs=self.webpackChunksisyphus_docs||[]).push([[8159],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},l),{},{components:n})):a.createElement(h,o({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2835:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1},o="Project structure",s={unversionedId:"advanced-guides/project-structure",id:"advanced-guides/project-structure",title:"Project structure",description:"Sisyphus uses the Macroservice pattern to design the project structure.",source:"@site/docs/advanced-guides/project-structure.md",sourceDirName:"advanced-guides",slug:"/advanced-guides/project-structure",permalink:"/docs/advanced-guides/project-structure",draft:!1,editUrl:"https://github.com/ButterCam/sisyphus-docs/edit/main/docs/advanced-guides/project-structure.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Advanced Guides",permalink:"/docs/category/advanced-guides"},next:{title:"Sisyphus Project Plugin",permalink:"/docs/advanced-guides/sisyphus-project-plugin"}},c={},p=[{value:"Microservices and Macroservices",id:"microservices-and-macroservices",level:2},{value:"Application",id:"application",level:2},{value:"Service",id:"service",level:2},{value:"Schema",id:"schema",level:2},{value:"Middleware",id:"middleware",level:2},{value:"Component",id:"component",level:2},{value:"Config Artifact",id:"config-artifact",level:2}],l={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"project-structure"},"Project structure"),(0,r.kt)("p",null,"Sisyphus uses the ",(0,r.kt)("strong",{parentName:"p"},"Macroservice")," pattern to design the project structure."),(0,r.kt)("p",null,"By dividing our project into five modules ",(0,r.kt)("strong",{parentName:"p"},"Schema")," / ",(0,r.kt)("strong",{parentName:"p"},"Component")," / ",(0,r.kt)("strong",{parentName:"p"},"Middleware")," / ",(0,r.kt)("strong",{parentName:"p"},"Service")," / ",(0,r.kt)("strong",{parentName:"p"},"Application"),",\nwe can manage the project more easily and add new components more flexibly."),(0,r.kt)("h2",{id:"microservices-and-macroservices"},"Microservices and Macroservices"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Microservices")," is a modern back-end application architecture that is centered on partitioning a business into\nmultiple microservices, each of which can run independently without affecting other services."),(0,r.kt)("p",null,"Microservices have the advantages of higher scalability, substitutability, agility, etc., but also have more complex\ncommunication, more maintenance costs, and a more difficult testing process."),(0,r.kt)("p",null,"It is very challenging to fully delineate the boundaries of microservices at the beginning of a project and it is\nchallenging to switch to a microservice architecture as the project grows."),(0,r.kt)("p",null,"For this reason, Sisyphus proposes the architectural concept of ",(0,r.kt)("strong",{parentName:"p"},"macroservices"),", which splits the deployment\nattributes of microservices from business attributes, with microservices only responsible for providing business logic\nand macroservices being deployable units that merge one or more microservices."),(0,r.kt)("p",null,"At the beginning of the project, we can create only one deployment unit containing all microservices, which is a\ntraditional monolithic application and can retain the characteristics of easy maintenance and debugging of monolithic\napplications."),(0,r.kt)("p",null,"As the project grows, we can create multiple deployment units and split the microservices for deployment, so that we can\nachieve progressive microservicing of backend services."),(0,r.kt)("h2",{id:"application"},"Application"),(0,r.kt)("p",null,"Sisyphus requires ",(0,r.kt)("strong",{parentName:"p"},"Application")," to be ",(0,r.kt)("strong",{parentName:"p"},"executable"),", but ",(0,r.kt)("strong",{parentName:"p"},"not logical"),", and a standard application should contain\nonly a few configuration files, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"application.yaml"),", and a Spring Boot Main function."),(0,r.kt)("p",null,"All business logic should be implemented by ",(0,r.kt)("strong",{parentName:"p"},"Component")," and ",(0,r.kt)("strong",{parentName:"p"},"Service")," that are added to the ",(0,r.kt)("strong",{parentName:"p"},"Application"),"\ndependency."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Application"),", as a Spring Boot application, will automatically load the Spring components in ",(0,r.kt)("strong",{parentName:"p"},"Component")," and ",(0,r.kt)("strong",{parentName:"p"},"\nService"),"."),(0,r.kt)("p",null,"For example, if our ",(0,r.kt)("strong",{parentName:"p"},"Application")," is to contain user services, then we can add ",(0,r.kt)("inlineCode",{parentName:"p"},"UserService"),", which provides user\nservices, to the dependency. If we also need to include content services, we can add ",(0,r.kt)("inlineCode",{parentName:"p"},"ContentSerivce"),", which provides\ncontent services, to the dependency as well.\nWhen this macroservice is started, it will provide both ",(0,r.kt)("inlineCode",{parentName:"p"},"UserService")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ContentService"),"."),(0,r.kt)("h2",{id:"service"},"Service"),(0,r.kt)("p",null,"All ",(0,r.kt)("strong",{parentName:"p"},"Service")," are ",(0,r.kt)("strong",{parentName:"p"},"not allowed")," to depend on each other, which ensures that individual microservices are\nencapsulated as a single macro service deployment."),(0,r.kt)("p",null,"Dependencies between ",(0,r.kt)("strong",{parentName:"p"},"Service")," should be provided by ",(0,r.kt)("strong",{parentName:"p"},"Schema"),", for example ",(0,r.kt)("inlineCode",{parentName:"p"},"ContentService")," needs to call the\ninterface of ",(0,r.kt)("inlineCode",{parentName:"p"},"UserService"),", but is ",(0,r.kt)("strong",{parentName:"p"},"not allowed")," to depend directly on ",(0,r.kt)("inlineCode",{parentName:"p"},"UserService")," itself, ",(0,r.kt)("strong",{parentName:"p"},"it should depend"),"\non ",(0,r.kt)("inlineCode",{parentName:"p"},"UserServiceSchema "),"."),(0,r.kt)("p",null,"This way, we can preserve the features of the microservice to the greatest extent possible. For example, we plan to\nrefactor ",(0,r.kt)("inlineCode",{parentName:"p"},"UserService")," but not modify the interface definition, we just need to implement a ",(0,r.kt)("inlineCode",{parentName:"p"},"UserServiceV2")," and replace\nit with ",(0,r.kt)("inlineCode",{parentName:"p"},"UserService")," in the macro service to complete the deployment."),(0,r.kt)("h2",{id:"schema"},"Schema"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Schema")," is the interface to the service and the component that we write the proto and generate the code for. In\nthe Schema, ",(0,r.kt)("strong",{parentName:"p"},"it should only contain "),"tool classes and tool functions for the proto, ",(0,r.kt)("strong",{parentName:"p"},"no business logic")," is allowed."),(0,r.kt)("p",null,"All ",(0,r.kt)("strong",{parentName:"p"},"Service")," should have its own ",(0,r.kt)("strong",{parentName:"p"},"Schema")," component and implement it. When services call each other, they should\nalso be called through the ",(0,r.kt)("strong",{parentName:"p"},"Schema")," service interface."),(0,r.kt)("h2",{id:"middleware"},"Middleware"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Middleware")," is a component that contains configuration and middleware drivers. Sisyphus requires developers to\nencapsulate all kinds of external middleware into a single ",(0,r.kt)("strong",{parentName:"p"},"Middleware")," component that can be easily invoked by each\nmicroservice."),(0,r.kt)("p",null,"For example, we can encapsulate a database as a ",(0,r.kt)("strong",{parentName:"p"},"Middleware")," component, and when ",(0,r.kt)("inlineCode",{parentName:"p"},"UserService")," needs to link a\ndatabase, just add the specified ",(0,r.kt)("strong",{parentName:"p"},"Middleware")," to the dependency and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Qualifier")," annotation to specify the\nexample database to connect to and start using it."),(0,r.kt)("p",null,"For this purpose, the ",(0,r.kt)("strong",{parentName:"p"},"Middleware")," should contain or read the code for configuring and initializing the database\ndriver for the ",(0,r.kt)("strong",{parentName:"p"},"Config Artifact"),"."),(0,r.kt)("p",null,"Sisyphus itself provides a lot of generic initialization logic for ",(0,r.kt)("strong",{parentName:"p"},"Middleware"),", such as Mysql, Redis, ElasticSearch,\netc. Just use these packages to quickly build a ",(0,r.kt)("strong",{parentName:"p"},"Middleware")," component."),(0,r.kt)("h2",{id:"component"},"Component"),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"Component")," is a collection of Spring components that contain edge business logic or provide abstraction tools for\nbusiness logic, for example API authentication can be abstracted as a ",(0,r.kt)("strong",{parentName:"p"},"Component"),", and logging and statistics\ncomponents can be abstracted as a ",(0,r.kt)("strong",{parentName:"p"},"Component"),"."),(0,r.kt)("h2",{id:"config-artifact"},"Config Artifact"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Middleware")," may contain configuration, but for more complex scenarios or due to permission requirements, writing\nconfiguration in ",(0,r.kt)("strong",{parentName:"p"},"Middleware")," is not a good approach."),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Config Artifact")," is the jar package that is used to store the configuration, which is pushed to a private maven\nrepository and read by ",(0,r.kt)("strong",{parentName:"p"},"Middleware"),"."),(0,r.kt)("p",null,"Permissions for jars can be managed through a private maven repository, and these jar packages can be split into\nmultiple environments."),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Config Artifact")," ",(0,r.kt)("strong",{parentName:"p"},"should not")," contain any Java or Kotlin code, it should ",(0,r.kt)("strong",{parentName:"p"},"only contain configuration files"),",\nsuch as ",(0,r.kt)("inlineCode",{parentName:"p"},"mysql.yml"),"."),(0,r.kt)("p",null,"Sisyphus provides\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ButterCam/sisyphus/tree/master/middleware/sisyphus-configuration-artifact"},"sisyphus-configuration-artifact")," component to download a specified Config Artifact and add it to the ClassPath when the application is\nlaunched. This is a lightweight solution for replacing various configuration centers."))}d.isMDXComponent=!0}}]);