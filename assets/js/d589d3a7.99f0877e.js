"use strict";(self.webpackChunksisyphus_docs=self.webpackChunksisyphus_docs||[]).push([[7162],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:2},a="Getting Started",l={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Let's run a Sisyphus service in five minutes.",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/docs/getting-started",draft:!1,editUrl:"https://github.com/ButterCam/sisyphus-docs/edit/main/docs/getting-started.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduce",permalink:"/docs/intro"},next:{title:"Guides",permalink:"/docs/category/guides"}},s={},p=[{value:"Preparation",id:"preparation",level:2},{value:"Required Tools",id:"required-tools",level:3},{value:"Run the Showcase Service",id:"run-the-showcase-service",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"build.gradle.kts",id:"buildgradlekts",level:3},{value:"Proto",id:"proto",level:3},{value:"Spring Application",id:"spring-application",level:3},{value:"Development",id:"development",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"Let's run a Sisyphus service in ",(0,i.kt)("strong",{parentName:"p"},"five minutes"),"."),(0,i.kt)("h2",{id:"preparation"},"Preparation"),(0,i.kt)("p",null,"Start by cloning our example project ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ButterCam/sisyphus-showcase"},"sisyphus-showcase"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/ButterCam/sisyphus-showcase.git\ncd sisyphus-showcase\n")),(0,i.kt)("h3",{id:"required-tools"},"Required Tools"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.azul.com/downloads/?package=jdk#download-openjdk"},"JDK")," 17 or above")),(0,i.kt)("admonition",{title:"Tips",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Any JDK version 17 or higher can be run, except for Azul Zulu, which is provided at the link.")),(0,i.kt)("admonition",{title:"Tips",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"java -version")," to see the version of your JDK.")),(0,i.kt)("h2",{id:"run-the-showcase-service"},"Run the Showcase Service"),(0,i.kt)("p",null,"Once the JDK is configured, simply run ",(0,i.kt)("inlineCode",{parentName:"p"},"./gradlew bootRun")," to start the service."),(0,i.kt)("p",null,"When the display shows ",(0,i.kt)("inlineCode",{parentName:"p"},"./gradlew")," does not have permission to execute, you can use chmod +x to make ",(0,i.kt)("inlineCode",{parentName:"p"},"./gradlew")," with\nexecute permission."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"> ./gradlew bootRun\n> zsh: permission denied: ./gradlew\n> chmod +x gradlew\n")),(0,i.kt)("p",null,"When you see a log like the one below, it means that the service has started and is listening on port 7469."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-log"},"2022-07-01 21:23:15.635  INFO 32159 --- [           main] c.b.s.starter.grpc.ServerLifecycle       : Running gRPC server via netty on port: 7469\n2022-07-01 21:23:15.640  INFO 32159 --- [           main] MainKt                                   : Started MainKt in 0.825 seconds (JVM running for 1.11)\n")),(0,i.kt)("p",null,"The first time you execute ",(0,i.kt)("inlineCode",{parentName:"p"},"bootRun"),", the required dependencies are automatically downloaded, which may take some time,\nso don't worry that the service will be ready in a few minutes."),(0,i.kt)("h2",{id:"project-structure"},"Project Structure"),(0,i.kt)("p",null,"Next, use ",(0,i.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/idea/download/"},"Intellij IDEA")," to create a project from existing code, select the\nshowcase folder, and choose Gradle from the imported modules option to import the Showcase project and start\ndevelopment."),(0,i.kt)("p",null,"The Showcase project is a standard ",(0,i.kt)("a",{parentName:"p",href:"https://gradle.org/"},"Gradle")," project, with the project configuration in\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"settings.gradle.kt"),"s and ",(0,i.kt)("inlineCode",{parentName:"p"},"build.gradle.kts")," files in the root directory."),(0,i.kt)("admonition",{title:"Tips",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"IntelliJ IDEA Ultimate and IntelliJ IDEA Community can both be used to develop Sisyphus projects and there is no major\ndifference in functionality.")),(0,i.kt)("h3",{id:"buildgradlekts"},"build.gradle.kts"),(0,i.kt)("p",null,"For the Gradle plugin part, we used Kotlin, Spring and Sisyphus Protobuf."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n    kotlin("jvm") version "1.6.20" // Kotlin Jvm Plugin\n    kotlin("plugin.spring") version "1.6.20" // Kotlin Spring Plugin\uff0cAutomatically mark classes with @Configuration, @Service annotations as open\n    id("org.springframework.boot") version "2.5.4" // Spring Boot Plugin\n    id("com.bybutter.sisyphus.protobuf") version "1.5.22" // Sisyphus Protobuf Plugin\n    idea\n    application\n}\n')),(0,i.kt)("p",null,"In the dependencies section, just add ",(0,i.kt)("inlineCode",{parentName:"p"},"sisyphus-grpc-server-starter")," and all related dependencies or configurations will\nbe configured automatically."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    implementation("com.bybutter.sisyphus.starter:sisyphus-grpc-server-starter:1.5.22")\n    testImplementation(kotlin("test"))\n}\n')),(0,i.kt)("h3",{id:"proto"},"Proto"),(0,i.kt)("p",null,"When the project is synchronized, the src/main/proto folder contains all the proto defined by the showcase service, and\nthe Sisyphus Protobuf plugin takes care of converting the proto files into Kotlin code."),(0,i.kt)("p",null,"Execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"generateProtos")," command in the Gradle Task window to generate Kotlin code for all proto files."),(0,i.kt)("p",null,"The generated code will be in the ",(0,i.kt)("inlineCode",{parentName:"p"},"build/generated/proto/source/main/")," folder and will be included in the final\ncompilation of the Jar."),(0,i.kt)("h3",{id:"spring-application"},"Spring Application"),(0,i.kt)("p",null,"showcase is also a standard Spring Boot application, so you can configure the application using the Spring Boot\nconfiguration method."),(0,i.kt)("p",null,"All the service implementations marked by the ",(0,i.kt)("inlineCode",{parentName:"p"},"@RpcServiceImpl")," annotation can be viewed in the ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," package."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@RpcServiceImpl\nclass EchoImpl : Echo() {\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Echo")," class is generated from ",(0,i.kt)("inlineCode",{parentName:"p"},"service Echo {}")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"echo.proto"),"."),(0,i.kt)("p",null,"All methods are marked with the ",(0,i.kt)("inlineCode",{parentName:"p"},"suspend")," keyword, which means that the entire service implementation supports Kotlin\nconcurrency."),(0,i.kt)("h2",{id:"development"},"Development"),(0,i.kt)("p",null,"You've already learned the basics of using Sisyphus, but check out\nour ",(0,i.kt)("a",{parentName:"p",href:"/docs/category/guides"},"other tutorials and documentation")," for more features of Sisyphus."))}d.isMDXComponent=!0}}]);