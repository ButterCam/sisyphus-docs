"use strict";(self.webpackChunksisyphus_docs=self.webpackChunksisyphus_docs||[]).push([[9303],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=l(t),d=s,g=m["".concat(p,".").concat(d)]||m[d]||u[d]||r;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,o=new Array(r);o[0]=m;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4934:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=t(7462),s=(t(7294),t(3905));const r={sidebar_position:1},o="Create a message",i={unversionedId:"guides/create-a-message",id:"guides/create-a-message",title:"Create a message",description:"Sisyphus provides an easy-to-use DSL API for building Message instances in Kotlin using Protobuf.",source:"@site/docs/guides/create-a-message.md",sourceDirName:"guides",slug:"/guides/create-a-message",permalink:"/docs/guides/create-a-message",draft:!1,editUrl:"https://github.com/ButterCam/sisyphus-docs/edit/main/docs/guides/create-a-message.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/docs/category/guides"},next:{title:"Implement a gRPC API",permalink:"/docs/guides/implement-a-grpc-api"}},p={},l=[{value:"Immutable and mutable types of messages",id:"immutable-and-mutable-types-of-messages",level:2},{value:"Reassigning values to messages",id:"reassigning-values-to-messages",level:2}],c={toc:l};function u(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"create-a-message"},"Create a message"),(0,s.kt)("p",null,"Sisyphus provides an easy-to-use DSL API for building Message instances in Kotlin using Protobuf."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-protobuf"},"message EchoResponse {\n    string content = 1;\n\n    Severity severity = 2;\n}\n")),(0,s.kt)("p",null,"The above proto file defines a Message named ",(0,s.kt)("inlineCode",{parentName:"p"},"EchoResponse"),", and the next step is to create an ",(0,s.kt)("inlineCode",{parentName:"p"},"EchoResponse")," instance\ndirectly using the ",(0,s.kt)("inlineCode",{parentName:"p"},"EchoResponse")," DSL."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"val response = EchoResponse {\n    this.content = input.content\n    this.severity = input.severity\n}\n")),(0,s.kt)("p",null,"A Message can be constructed by simply using curly brackets after the Message type, and properties can be freely set in\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"{}")," code block."),(0,s.kt)("admonition",{title:"Can't find the EchoResponse type?",type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Try executing ",(0,s.kt)("inlineCode",{parentName:"p"},"generateProtos")," in the Gradle Task window to generate all the Kotlin code.")),(0,s.kt)("h2",{id:"immutable-and-mutable-types-of-messages"},"Immutable and mutable types of messages"),(0,s.kt)("p",null,"Sisyphus provides two access interfaces for all messages, for example, in the above example, Sisyphus generates two\ninterfaces for ",(0,s.kt)("inlineCode",{parentName:"p"},"EchoResponse")," messages. They are ",(0,s.kt)("inlineCode",{parentName:"p"},"EchoResponse")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"MutableEchoResponse"),"."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"EchoResponse")," is an immutable interface and is the basic entry point for accessing Protobuf messages, in general we\njust need to import this interface."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"MutableEchoResponse")," is a mutable interface, normally hidden by various message DSLs, and will be placed in a\nspecial ",(0,s.kt)("inlineCode",{parentName:"p"},"internal")," package."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"EchoResponse { // this: MutableEchoResponse\n    this.content = input.content\n    this.severity = input.severity\n}\n")),(0,s.kt)("p",null,"For example, in the above example, ",(0,s.kt)("inlineCode",{parentName:"p"},"MutableEchoResponse")," access is provided in the code field expanded by\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"EchoResponse")," DSL."),(0,s.kt)("p",null,"Once a message is removed from the creation of a message DSL code field, it is immutable access. See Kotlin's var and\nval design for more information on the benefits of mutable and immutable access."),(0,s.kt)("h2",{id:"reassigning-values-to-messages"},"Reassigning values to messages"),(0,s.kt)("p",null,"Once the message has been created, the ",(0,s.kt)("inlineCode",{parentName:"p"},"MutableEchoResponse")," DSL domain can be re-expanded via the ",(0,s.kt)("inlineCode",{parentName:"p"},"invoke")," DSL."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'val response = EchoResponse {\n    this.content = input.content\n    this.severity = input.severity\n}\nval newResponse = response.invoke { // can also be omitted as `response {`\n    this.content = "new content"\n}\n')),(0,s.kt)("admonition",{title:"Attention",type:"danger"},(0,s.kt)("p",{parentName:"admonition"},"However, it is worth noting that the ",(0,s.kt)("inlineCode",{parentName:"p"},"invoke")," DSL creates a new Message instance rather than assigning a value to the\noriginal instance."),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"response !== newResponse // response and newResponse are not the same object\n"))))}u.isMDXComponent=!0}}]);